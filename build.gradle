buildscript {
  dependencies {
    classpath("org.yaml:snakeyaml:1.3")
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.34")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.12.RELEASE'
  id 'org.springframework.boot' version '2.7.1'
  id 'org.owasp.dependencycheck' version '7.1.1'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'org.sonarqube' version '3.0'
  id 'info.solidsoft.pitest' version '1.7.0'
  id 'io.freefair.lombok' version '6.3.0'
  id 'au.com.dius.pact' version '4.1.7'
  id 'org.flywaydb.flyway' version '9.0.1'
  id 'uk.gov.hmcts.java' version '0.12.35'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'

def versions = [
  jackson               : '2.13.3',
  jacksonAnnotation     : '2.13.3',
  jacksonDatabind       : '2.13.3',
  junit                 : '5.8.2',
  junitPlatform         : '1.8.2',
  pitest                : '1.9.3',
  reformLogging         : '5.1.7',
  reformHealthStarter   : '0.0.5',
  serenity              : '3.2.0',
  springBoot            : '2.7.1',
  springSecurity        : '5.7.1',
  springDoc             : '1.6.9',
  springHystrix         : '2.2.10.RELEASE',
  pact_version          : '4.1.7',
  serviceTokenGenerator : '4.0.2'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

mainClassName = 'uk.gov.hmcts.reform.iahearingsapi.Application'

group = 'uk.gov.hmcts.reform'
version = '1.0.0'

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest{
    java{
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  contractImplementation.extendsFrom testImplementation
  contractTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  systemProperty "scenario", System.getProperty('scenario')
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  group = "Verification"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test) {
  description = "Runs Contract Tests"
  group = "Verification"
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle.xml'))
}

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

pmd {
  toolVersion = "6.41.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'category/java/errorprone.xml',
    'category/java/bestpractices.xml'
  ]
}

jacoco {
  toolVersion = "0.8.8"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.iahearingsapi.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.iahearingsapi.infrastructure.config.*',
    'uk.gov.hmcts.reform.iahearingsapi.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  failWhenNoMutations = false
  mutationThreshold = 90
}

project.tasks['pitest'].group = "Verification"

project.ext {
  pacticipant = 'ia_hearingsApi'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Immigration & Asylum Hearings Api"
    property "sonar.projectKey", "IAHEARINGSAPI"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/iahearingsapi/infrastructure/config/**," +
                                 "src/main/java/uk/gov/hmcts/reform/iahearingsapi/Application.java"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.17.0"


  dependencyManagement {
    dependencies {
      // CVE-2019-0232, CVE-2019-0199 - command line injections on windows
      //CVE-2020-13934
      dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.63') {
        entry 'tomcat-embed-core'
        entry 'tomcat-embed-el'
        entry 'tomcat-embed-websocket'
      }

      // CVE-2020-15522
      dependency group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'

      // CVE-2019-10086
      dependencySet(group: 'commons-beanutils', version: '1.9.4') {
        entry 'commons-beanutils'
      }

      //CVE-2021-42550
      dependencySet(group: 'ch.qos.logback', version: '1.2.10') {
        entry 'logback-classic'
        entry 'logback-core'
      }

      //CVE-2021-22060
      dependencySet(group: 'org.springframework', version: '5.3.20') {
        entry 'spring-aop'
        entry 'spring-beans'
        entry 'spring-context'
        entry 'spring-context-support'
        entry 'spring-core'
        entry 'spring-expression'
        entry 'spring-jcl'
        entry 'spring-web'
        entry 'spring-webmvc'
      }

      dependencySet(group: 'org.springframework.security', version: '5.7.1') {
        entry 'spring-security-config'
        entry 'spring-security-core'
        entry 'spring-security-crypto'
        entry 'spring-security-oauth2-core'
        entry 'spring-security-oauth2-client'
        entry 'spring-security-oauth2-jose'
        entry 'spring-security-oauth2-resource-server'
        entry 'spring-security-web'
      }
    }
  }}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server', version: versions.springBoot

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.1'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.1'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc

  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'

  implementation group: 'com.google.guava', name: 'guava', version: '30.0-jre'
  implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.9.0'

  implementation group: 'com.github.hmcts', name:'service-auth-provider-java-client', version: versions.serviceTokenGenerator
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jacksonAnnotation
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
  implementation group: 'com.fasterxml.jackson', name: 'jackson-bom', version: '2.13.3', ext: 'pom'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  testImplementation group: 'io.rest-assured', name: 'rest-assured-all', version: '3.3.0'
  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.5.0'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  //pact contract testing
  contractImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

  contractImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
  contractImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.2')
  contractImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')

  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.6.28'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot

  smokeTestImplementation(group: 'org.yaml', name: 'snakeyaml', version: '1.30')

  integrationTestImplementation(group: 'org.yaml', name: 'snakeyaml', version: '1.30')

  functionalTestImplementation(group: 'org.yaml', name: 'snakeyaml', version: '1.30')

  contractImplementation(group: 'org.yaml', name: 'snakeyaml', version: '1.30')

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractImplementation sourceSets.main.runtimeClasspath
  contractImplementation sourceSets.test.runtimeClasspath
}

task runAndPublishConsumerPactTests(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }

gradle.startParameter.continueOnFailure = true

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues.
// this setting only applies when running via gradle bootRun -- see web.config for the
// java flag that configures the deployed applications
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

bootJar {
  archiveFileName = "ia-hearings-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
